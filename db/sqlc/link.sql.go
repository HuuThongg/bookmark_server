// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: link.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addLink = `-- name: AddLink :one
INSERT INTO link (link_id, link_title, link_hostname, link_url, link_favicon, account_id, folder_id, link_thumbnail)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
`

type AddLinkParams struct {
	LinkID        string      `json:"link_id"`
	LinkTitle     string      `json:"link_title"`
	LinkHostname  string      `json:"link_hostname"`
	LinkUrl       string      `json:"link_url"`
	LinkFavicon   string      `json:"link_favicon"`
	AccountID     int64       `json:"account_id"`
	FolderID      pgtype.Text `json:"folder_id"`
	LinkThumbnail string      `json:"link_thumbnail"`
}

func (q *Queries) AddLink(ctx context.Context, arg AddLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, addLink,
		arg.LinkID,
		arg.LinkTitle,
		arg.LinkHostname,
		arg.LinkUrl,
		arg.LinkFavicon,
		arg.AccountID,
		arg.FolderID,
		arg.LinkThumbnail,
	)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.LinkTitle,
		&i.LinkThumbnail,
		&i.LinkFavicon,
		&i.LinkHostname,
		&i.LinkUrl,
		&i.LinkNotes,
		&i.AccountID,
		&i.FolderID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TextsearchableIndexCol,
	)
	return i, err
}

const addNote = `-- name: AddNote :one
UPDATE link
SET link_notes = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE link_id = $1 AND account_id = $3
RETURNING link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
`

type AddNoteParams struct {
	LinkID    string `json:"link_id"`
	LinkNotes string `json:"link_notes"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) AddNote(ctx context.Context, arg AddNoteParams) (Link, error) {
	row := q.db.QueryRow(ctx, addNote, arg.LinkID, arg.LinkNotes, arg.AccountID)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.LinkTitle,
		&i.LinkThumbnail,
		&i.LinkFavicon,
		&i.LinkHostname,
		&i.LinkUrl,
		&i.LinkNotes,
		&i.AccountID,
		&i.FolderID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TextsearchableIndexCol,
	)
	return i, err
}

const changeLinkTitle = `-- name: ChangeLinkTitle :one
UPDATE link
SET link_title = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE link_id = $1 AND account_id = $3
RETURNING link_title
`

type ChangeLinkTitleParams struct {
	LinkID    string `json:"link_id"`
	LinkTitle string `json:"link_title"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) ChangeLinkTitle(ctx context.Context, arg ChangeLinkTitleParams) (string, error) {
	row := q.db.QueryRow(ctx, changeLinkTitle, arg.LinkID, arg.LinkTitle, arg.AccountID)
	var link_title string
	err := row.Scan(&link_title)
	return link_title, err
}

const changeLinkURL = `-- name: ChangeLinkURL :one
UPDATE link
SET link_url = $2,
    updated_at = CURRENT_TIMESTAMP
WHERE link_id = $1 AND account_id = $3
RETURNING link_url
`

type ChangeLinkURLParams struct {
	LinkID    string `json:"link_id"`
	LinkUrl   string `json:"link_url"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) ChangeLinkURL(ctx context.Context, arg ChangeLinkURLParams) (string, error) {
	row := q.db.QueryRow(ctx, changeLinkURL, arg.LinkID, arg.LinkUrl, arg.AccountID)
	var link_url string
	err := row.Scan(&link_url)
	return link_url, err
}

const deleteLinkForever = `-- name: DeleteLinkForever :one
DELETE FROM link WHERE link_id = $1 RETURNING link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
`

func (q *Queries) DeleteLinkForever(ctx context.Context, linkID string) (Link, error) {
	row := q.db.QueryRow(ctx, deleteLinkForever, linkID)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.LinkTitle,
		&i.LinkThumbnail,
		&i.LinkFavicon,
		&i.LinkHostname,
		&i.LinkUrl,
		&i.LinkNotes,
		&i.AccountID,
		&i.FolderID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TextsearchableIndexCol,
	)
	return i, err
}

const getAllDeletedLinks = `-- name: GetAllDeletedLinks :many
SELECT link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col FROM link 
WHERE account_id = $1 AND deleted_at IS NOT NULL
`

func (q *Queries) GetAllDeletedLinks(ctx context.Context, accountID int64) ([]Link, error) {
	rows, err := q.db.Query(ctx, getAllDeletedLinks, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.LinkTitle,
			&i.LinkThumbnail,
			&i.LinkFavicon,
			&i.LinkHostname,
			&i.LinkUrl,
			&i.LinkNotes,
			&i.AccountID,
			&i.FolderID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TextsearchableIndexCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLinks = `-- name: GetAllLinks :many
SELECT link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col FROM link WHERE account_id = $1  AND deleted_at IS NULL ORDER BY added_at DESC
`

func (q *Queries) GetAllLinks(ctx context.Context, accountID int64) ([]Link, error) {
	rows, err := q.db.Query(ctx, getAllLinks, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.LinkTitle,
			&i.LinkThumbnail,
			&i.LinkFavicon,
			&i.LinkHostname,
			&i.LinkUrl,
			&i.LinkNotes,
			&i.AccountID,
			&i.FolderID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TextsearchableIndexCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFolderLinks = `-- name: GetFolderLinks :many
SELECT link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col FROM link WHERE folder_id = $1 AND deleted_at IS NULL ORDER BY added_at DESC
`

func (q *Queries) GetFolderLinks(ctx context.Context, folderID pgtype.Text) ([]Link, error) {
	rows, err := q.db.Query(ctx, getFolderLinks, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.LinkTitle,
			&i.LinkThumbnail,
			&i.LinkFavicon,
			&i.LinkHostname,
			&i.LinkUrl,
			&i.LinkNotes,
			&i.AccountID,
			&i.FolderID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TextsearchableIndexCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLink = `-- name: GetLink :one
SELECT link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col FROM link
WHERE link_id = $1 AND account_id = $2
LIMIT 1
`

type GetLinkParams struct {
	LinkID    string `json:"link_id"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) GetLink(ctx context.Context, arg GetLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, getLink, arg.LinkID, arg.AccountID)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.LinkTitle,
		&i.LinkThumbnail,
		&i.LinkFavicon,
		&i.LinkHostname,
		&i.LinkUrl,
		&i.LinkNotes,
		&i.AccountID,
		&i.FolderID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TextsearchableIndexCol,
	)
	return i, err
}

const getLinksByTagName = `-- name: GetLinksByTagName :many
SELECT l.link_id, l.link_title, l.link_thumbnail, l.link_favicon, l.link_hostname, l.link_url, l.link_notes, l.account_id, l.folder_id, l.added_at, l.updated_at, l.deleted_at, l.textsearchable_index_col
FROM link l
JOIN link_tags lt ON l.link_id = lt.link_id
JOIN tags t ON lt.tag_id = t.tag_id
WHERE t.tag_name = $1 AND l.deleted_at IS NULL AND l.account_id = $2
`

type GetLinksByTagNameParams struct {
	TagName   string `json:"tag_name"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) GetLinksByTagName(ctx context.Context, arg GetLinksByTagNameParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, getLinksByTagName, arg.TagName, arg.AccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.LinkTitle,
			&i.LinkThumbnail,
			&i.LinkFavicon,
			&i.LinkHostname,
			&i.LinkUrl,
			&i.LinkNotes,
			&i.AccountID,
			&i.FolderID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TextsearchableIndexCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinksByUserID = `-- name: GetLinksByUserID :many
SELECT link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col FROM link WHERE account_id = $1
`

func (q *Queries) GetLinksByUserID(ctx context.Context, accountID int64) ([]Link, error) {
	rows, err := q.db.Query(ctx, getLinksByUserID, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.LinkTitle,
			&i.LinkThumbnail,
			&i.LinkFavicon,
			&i.LinkHostname,
			&i.LinkUrl,
			&i.LinkNotes,
			&i.AccountID,
			&i.FolderID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TextsearchableIndexCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLinksMovedToTrash = `-- name: GetLinksMovedToTrash :many
SELECT link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col FROM link WHERE deleted_at IS NOT NULL AND account_id = $1 ORDER BY deleted_at DESC
`

func (q *Queries) GetLinksMovedToTrash(ctx context.Context, accountID int64) ([]Link, error) {
	rows, err := q.db.Query(ctx, getLinksMovedToTrash, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.LinkTitle,
			&i.LinkThumbnail,
			&i.LinkFavicon,
			&i.LinkHostname,
			&i.LinkUrl,
			&i.LinkNotes,
			&i.AccountID,
			&i.FolderID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TextsearchableIndexCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRootLinks = `-- name: GetRootLinks :many
SELECT link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col FROM link WHERE account_id = $1 AND folder_id IS NULL AND deleted_at IS NULL ORDER BY added_at DESC
`

func (q *Queries) GetRootLinks(ctx context.Context, accountID int64) ([]Link, error) {
	rows, err := q.db.Query(ctx, getRootLinks, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.LinkTitle,
			&i.LinkThumbnail,
			&i.LinkFavicon,
			&i.LinkHostname,
			&i.LinkUrl,
			&i.LinkNotes,
			&i.AccountID,
			&i.FolderID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TextsearchableIndexCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveLinkToFolder = `-- name: MoveLinkToFolder :one
UPDATE link SET folder_id = $1 WHERE link_id = $2 RETURNING link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
`

type MoveLinkToFolderParams struct {
	FolderID pgtype.Text `json:"folder_id"`
	LinkID   string      `json:"link_id"`
}

func (q *Queries) MoveLinkToFolder(ctx context.Context, arg MoveLinkToFolderParams) (Link, error) {
	row := q.db.QueryRow(ctx, moveLinkToFolder, arg.FolderID, arg.LinkID)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.LinkTitle,
		&i.LinkThumbnail,
		&i.LinkFavicon,
		&i.LinkHostname,
		&i.LinkUrl,
		&i.LinkNotes,
		&i.AccountID,
		&i.FolderID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TextsearchableIndexCol,
	)
	return i, err
}

const moveLinkToRoot = `-- name: MoveLinkToRoot :one
UPDATE link SET folder_id = NULL WHERE link_id = $1 RETURNING link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
`

func (q *Queries) MoveLinkToRoot(ctx context.Context, linkID string) (Link, error) {
	row := q.db.QueryRow(ctx, moveLinkToRoot, linkID)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.LinkTitle,
		&i.LinkThumbnail,
		&i.LinkFavicon,
		&i.LinkHostname,
		&i.LinkUrl,
		&i.LinkNotes,
		&i.AccountID,
		&i.FolderID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TextsearchableIndexCol,
	)
	return i, err
}

const moveLinkToTrash = `-- name: MoveLinkToTrash :one
UPDATE link SET deleted_at = CURRENT_TIMESTAMP WHERE link_id = $1 RETURNING link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
`

func (q *Queries) MoveLinkToTrash(ctx context.Context, linkID string) (Link, error) {
	row := q.db.QueryRow(ctx, moveLinkToTrash, linkID)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.LinkTitle,
		&i.LinkThumbnail,
		&i.LinkFavicon,
		&i.LinkHostname,
		&i.LinkUrl,
		&i.LinkNotes,
		&i.AccountID,
		&i.FolderID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TextsearchableIndexCol,
	)
	return i, err
}

const renameLink = `-- name: RenameLink :one
UPDATE link SET link_title = $1 WHERE link_id = $2 RETURNING link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
`

type RenameLinkParams struct {
	LinkTitle string `json:"link_title"`
	LinkID    string `json:"link_id"`
}

func (q *Queries) RenameLink(ctx context.Context, arg RenameLinkParams) (Link, error) {
	row := q.db.QueryRow(ctx, renameLink, arg.LinkTitle, arg.LinkID)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.LinkTitle,
		&i.LinkThumbnail,
		&i.LinkFavicon,
		&i.LinkHostname,
		&i.LinkUrl,
		&i.LinkNotes,
		&i.AccountID,
		&i.FolderID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TextsearchableIndexCol,
	)
	return i, err
}

const restoreLinkFromTrash = `-- name: RestoreLinkFromTrash :one
UPDATE link SET deleted_at = NULL WHERE link_id = $1 RETURNING link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
`

func (q *Queries) RestoreLinkFromTrash(ctx context.Context, linkID string) (Link, error) {
	row := q.db.QueryRow(ctx, restoreLinkFromTrash, linkID)
	var i Link
	err := row.Scan(
		&i.LinkID,
		&i.LinkTitle,
		&i.LinkThumbnail,
		&i.LinkFavicon,
		&i.LinkHostname,
		&i.LinkUrl,
		&i.LinkNotes,
		&i.AccountID,
		&i.FolderID,
		&i.AddedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.TextsearchableIndexCol,
	)
	return i, err
}

const searchLinks = `-- name: SearchLinks :many
SELECT link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
FROM link
WHERE textsearchable_index_col @@ plainto_tsquery($1) AND account_id = $2 AND deleted_at IS NULL
ORDER BY added_at DESC
`

type SearchLinksParams struct {
	PlaintoTsquery string `json:"plainto_tsquery"`
	AccountID      int64  `json:"account_id"`
}

func (q *Queries) SearchLinks(ctx context.Context, arg SearchLinksParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, searchLinks, arg.PlaintoTsquery, arg.AccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.LinkTitle,
			&i.LinkThumbnail,
			&i.LinkFavicon,
			&i.LinkHostname,
			&i.LinkUrl,
			&i.LinkNotes,
			&i.AccountID,
			&i.FolderID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TextsearchableIndexCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchLinkz = `-- name: SearchLinkz :many
SELECT link_id, link_title, link_thumbnail, link_favicon, link_hostname, link_url, link_notes, account_id, folder_id, added_at, updated_at, deleted_at, textsearchable_index_col
FROM link
WHERE link_title ILIKE $1 AND account_id = $2 AND deleted_at IS NULL
ORDER BY added_at DESC
`

type SearchLinkzParams struct {
	LinkTitle string `json:"link_title"`
	AccountID int64  `json:"account_id"`
}

func (q *Queries) SearchLinkz(ctx context.Context, arg SearchLinkzParams) ([]Link, error) {
	rows, err := q.db.Query(ctx, searchLinkz, arg.LinkTitle, arg.AccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.LinkID,
			&i.LinkTitle,
			&i.LinkThumbnail,
			&i.LinkFavicon,
			&i.LinkHostname,
			&i.LinkUrl,
			&i.LinkNotes,
			&i.AccountID,
			&i.FolderID,
			&i.AddedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.TextsearchableIndexCol,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
